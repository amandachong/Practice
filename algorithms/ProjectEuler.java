public class ProjectEuler {
	/**
	 * Multiples of 3 and 5
	 * 
	 * If we list all the natural numbers below 10 that are multiples of 3 or 5,
	 * we get 3, 5, 6 and 9. The sum of these multiples is 23.
	 * 
	 * Find the sum of all the multiples of 3 or 5 below 1000.
	 */
	public static int multiplesOf3And5() {
		int n = 1000;
		int sum = 0;
		for (int i = 3; i < n; i++) {
			if (i % 3 == 0 || i % 5 == 0) {
				sum += i;
			}
		}
		return sum;
	}

	/**
	 * Even Fibonacci numbers
	 * 
	 * Each new term in the Fibonacci sequence is generated by adding the
	 * previous two terms. By starting with 1 and 2, the first 10 terms will be:
	 * 
	 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	 * 
	 * By considering the terms in the Fibonacci sequence whose values do not
	 * exceed four million, find the sum of the even-valued terms.
	 */
	public static int evenFibonacci() {
		int n = 4000000;
		int[] fib = new int[n + 1];
		fib[0] = 0;
		fib[1] = 1;
		int sum = 0;
		for (int i = 2; i <= n; i++) {
			fib[i] = fib[i - 1] + fib[i - 2];
			if (fib[i] % 2 == 0) {
				sum += fib[i];
			}
		}
		return sum;
	}

	/**
	 * Smallest multiple Problem 5
	 * 
	 * 2520 is the smallest number that can be divided by each of the numbers
	 * from 1 to 10 without any remainder.
	 * 
	 * What is the smallest positive number that is evenly divisible by all of
	 * the numbers from 1 to 20?
	 */
	public static int smallestMultiple() {
		int i = 20;
		while (true) {
			if (i % 19 == 0 && i % 18 == 0 && i % 17 == 0 && i % 16 == 0
					&& i % 15 == 0 && i % 14 == 0 && i % 13 == 0 && i % 12 == 0
					&& i % 11 == 0 && i % 9 == 0 && i % 8 == 0 && i % 7 == 0
					&& i % 6 == 0 && i % 3 == 0) {
				return i;
			}
			i += 20;
		}
	}

	/**
	 * Largest product in a series Problem 8
	 * 
	 * The four adjacent digits in the 1000-digit number that have the greatest
	 * product are 9 × 9 × 8 × 9 = 5832.
	 * 
	 * 73167176531330624919225119674426574742355349194934
	 * 96983520312774506326239578318016984801869478851843
	 * 85861560789112949495459501737958331952853208805511
	 * 12540698747158523863050715693290963295227443043557
	 * 66896648950445244523161731856403098711121722383113
	 * 62229893423380308135336276614282806444486645238749
	 * 30358907296290491560440772390713810515859307960866
	 * 70172427121883998797908792274921901699720888093776
	 * 65727333001053367881220235421809751254540594752243
	 * 52584907711670556013604839586446706324415722155397
	 * 53697817977846174064955149290862569321978468622482
	 * 83972241375657056057490261407972968652414535100474
	 * 82166370484403199890008895243450658541227588666881
	 * 16427171479924442928230863465674813919123162824586
	 * 17866458359124566529476545682848912883142607690042
	 * 24219022671055626321111109370544217506941658960408
	 * 07198403850962455444362981230987879927244284909188
	 * 84580156166097919133875499200524063689912560717606
	 * 05886116467109405077541002256983155200055935729725
	 * 71636269561882670428252483600823257530420752963450
	 * 
	 * Find the thirteen adjacent digits in the 1000-digit number that have the
	 * greatest product. What is the value of this product?
	 */
	public static int largestProductInSeries() {
		return 0;
	}

	public static void main(String[] args) {
		System.out.println(multiplesOf3And5());
		System.out.println(evenFibonacci());
		System.out.println(smallestMultiple());
	}
}
